

"""
前置き
====================================
「'」または「"」が３つ結合される場合は、「一つ以上の行にわたる文字列がここで始まる＜終わる＞」
と意味します。
一部の例外を除いて、パイソン・インタープリターは文字列の無視するため、
この類の文字列はプログラムの解説によく使われます。

このファイルでは、複数行に渡る解説の文字列の中に、実行可能なパイソンコードを挿入しています。
doctestというモジュールを使うと、解説用の文字列中の命令分を実行し、その命令分をテストする
ことができます。

現時点ではdoctestの使い方を覚える必要はありませんが、このファイルをdoctestとして
実行する方法を覚えてください。ご使用のIDEを使って実行することをお勧めです。

====================================
"""

# ここで"r"という関数を定義します。
# これを使うことで、浮動小数点を６つまでと限定します。
r = lambda x : round(x, 6)



def operators_lesson1():
    """

    パイソン・プログラムには次の要素があります。

    1. オペレーター
    2. データ型 (type)
    3. 変数

    4a. 括り付け関数
    4b. 外部ライブラリーからインポートする関数
    4c. 独自関数

    5a. 空白　（改行、タブなど）
    5b. インデンテーション　（空白４つを使いましょう）
    プログラムの流れ制御においては、インデンテーションが不可欠

    パイソンコンソールで一緒に打ちましょう：

    ====================================
    割り算
    ====================================

    >>> r(7/3)
    2.333333

    >>> type(7/3)
    <class 'float'>

    ====================================
    掛け算
    ====================================

    >>> 7*3
    21

    >>> type(7*3)
    <class 'int'>

    >>> 7**3
    343

    >>> type(7**3)
    <class 'int'>

    ========================================
    関数について
    ========================================

    関数を使うときは、次のように小括弧を二つ使います。

    例えば、"f"という関数を呼ぶ場合、"f()"と書きます。
    括弧の中に変数が入る場合もあります。
    f(a)
    f(a,b)
    この場合、aとbは「引数」と呼びます。

    上記にもtype()という括り付け関数を使用して、値のデータ型をprintしています。

    他にも便利な括り付け関数があります。

    print(x)  # 引数をprintする
    dir() # 実行中のプログラムのメモリー（namespace)を返す
    dir(x) # xというオブジェクトの属性を返す
    int(x) # xをint型に「型強制」する (注1)    　
    float(x) #　xをfloat型に型強制する
    str(x) # xを文字列型に型強制する

    注1：型強制（英：type coercion）は、あるデータ型から他のデータ型への値の自動的または暗黙の変換です
    (文字列から数値など)。パイソンの場合、型変換と型強制はほぼ同じ意味です。


    >>> 7//3
    2

    >>> type(7//3)
    <class 'int'>

    # >>> 7 = 3 # これは間違い！

    >>> 7 == 3  # ==の右と左が等しいかどうか
    False

    >>> type(False)
    <class 'bool'>

    >>> bool(1)
    True

    >>> bool(0)
    False

    覚えて置きましょう：0はFalseとして使えます。0以外の数値はTrueと解釈されます。


    今回の最後に、複素数を使ってオイラーの方程式を確認しましょう。

    >>> from math import e, pi
    >>> i = (0 + 1j)
    >>> val = e**(i*pi)
    >>> val.real
    -1.0
    >>> r(val.imag)
    0.0
    """


if __name__ == "__main__":
    import doctest
    doctest.testmod(verbose=True)



